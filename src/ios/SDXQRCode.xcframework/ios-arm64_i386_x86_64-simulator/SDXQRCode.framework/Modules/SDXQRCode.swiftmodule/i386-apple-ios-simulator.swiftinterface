// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SDXQRCode
import AVFoundation
import AVFoundation/*.AVCaptureDevice*/
import CoreImage.CIFilterBuiltins
import CoreImage
import EventKit
import Foundation
@_exported import SDXQRCode
import Swift
import UIKit
import UIKit.UIView
public struct SDXQRCodePayload {
  public let merchantId: Swift.String
  public let merchantUserId: Swift.String
  public let merchantName: Swift.String
  public let currency: Swift.String
  public let dateTime: Foundation.Date
  public let nationalIdentifier: Swift.String
  public let productCode: Swift.String?
  public let transactionValue: Swift.Double?
  public let tip: Swift.String?
  public let fee: Swift.String?
  public let city: Swift.String?
  public let country: Swift.String?
  public let transactionId: Swift.String?
  public let merchantBranchCode: Swift.String?
  public init?(dict: [Swift.String : Any])
}
public enum SDXQRCodeCurrency : Swift.Int, Swift.CaseIterable {
  case AED, AFN, ALL, AMD, ARS, AUD, AZN, BAM, BDT, BGN, BHD, BND, BOB, BRL, BYR, BZD, CAD, CHF, CLP, CNY, COP, CRC, CZK, DKK, DOP, DZD, EGP, ETB, EUR, GBP, GEL, GTQ, HKD, HNL, HRK, HUF, IDR, ILS, INR, IQD, IRR, ISK, JMD, JOD, JPY, KES, KGS, KHR, KRW, KWD, KZT, LAK, LBP, LKR, LTL, LYD, MAD, MKD, MNT, MOP, MVR, MXN, MYR, NIO, NOK, NPR, NZD, OMR, PAB, PEN, PHP, PKR, PLN, PYG, QAR, RON, RSD, RUB, RWF, SAR, SEK, SGD, SYP, THB, TJS, TND, TRY, TTD, TWD, UAH, USD, UYU, UZS, VEF, VND, XOF, YER, ZAR
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
  public typealias AllCases = [SDXQRCode.SDXQRCodeCurrency]
  public static var allCases: [SDXQRCode.SDXQRCodeCurrency] {
    get
  }
}
public struct SDXQRCodeError {
  public let type: SDXQRCode.SDXQRCodeErrorType
  public let message: Swift.String
}
public enum SDXQRCodeCountry : Swift.String, Swift.CaseIterable {
  case af
  case ax
  case al
  case dz
  case `as`
  case ad
  case ao
  case ai
  case aq
  case ag
  case ar
  case am
  case aw
  case au
  case at
  case az
  case bs
  case bh
  case bd
  case bb
  case by
  case be
  case bz
  case bj
  case bm
  case bt
  case bo
  case bq
  case ba
  case bw
  case bv
  case br
  case io
  case bn
  case bg
  case bf
  case bi
  case cv
  case kh
  case cm
  case ca
  case ky
  case cf
  case td
  case cl
  case cn
  case cx
  case cc
  case co
  case km
  case cg
  case cd
  case ck
  case cr
  case ci
  case hr
  case cu
  case cw
  case cy
  case cz
  case dk
  case dj
  case dm
  case `do`
  case ec
  case eg
  case sv
  case gq
  case er
  case ee
  case et
  case fk
  case fo
  case fj
  case fi
  case fr
  case gf
  case pf
  case tf
  case ga
  case gm
  case ge
  case de
  case gh
  case gi
  case gr
  case gl
  case gd
  case gp
  case gu
  case gt
  case gg
  case gn
  case gw
  case gy
  case ht
  case hm
  case va
  case hn
  case hk
  case hu
  case `is`
  case `in`
  case id
  case ir
  case iq
  case ie
  case im
  case il
  case it
  case jm
  case jp
  case je
  case jo
  case kz
  case ke
  case ki
  case kp
  case kr
  case kw
  case kg
  case la
  case lv
  case lb
  case ls
  case lr
  case ly
  case li
  case lt
  case lu
  case mo
  case mk
  case mg
  case mw
  case my
  case mv
  case ml
  case mt
  case mh
  case mq
  case mr
  case mu
  case yt
  case mx
  case fm
  case md
  case mc
  case mn
  case me
  case ms
  case ma
  case mz
  case mm
  case na
  case nr
  case np
  case nl
  case nc
  case nz
  case ni
  case ne
  case ng
  case nu
  case nf
  case mp
  case no
  case om
  case pk
  case pw
  case ps
  case pa
  case pg
  case py
  case pe
  case ph
  case pn
  case pl
  case pt
  case pr
  case qa
  case re
  case ro
  case ru
  case rw
  case bl
  case sh
  case kn
  case lc
  case mf
  case pm
  case vc
  case ws
  case sm
  case st
  case sa
  case sn
  case rs
  case sc
  case sl
  case sg
  case sx
  case sk
  case si
  case sb
  case so
  case za
  case gs
  case ss
  case es
  case lk
  case sd
  case sr
  case sj
  case sz
  case se
  case ch
  case sy
  case tw
  case tj
  case tz
  case th
  case tl
  case tg
  case tk
  case to
  case tt
  case tn
  case tr
  case tm
  case tc
  case tv
  case ug
  case ua
  case ae
  case gb
  case us
  case um
  case uy
  case uz
  case vu
  case ve
  case vn
  case vg
  case vi
  case wf
  case eh
  case ye
  case zm
  case zw
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [SDXQRCode.SDXQRCodeCountry]
  public static var allCases: [SDXQRCode.SDXQRCodeCountry] {
    get
  }
}
public enum SDXQRCodeErrorType {
  case cameraPermissionError
  case AVCaptureDeviceInputError
  case deviceCameraNotSuported
  case invalidEMVcoFormat
  case informationMissing
  public static func == (a: SDXQRCode.SDXQRCodeErrorType, b: SDXQRCode.SDXQRCodeErrorType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class SDXQRCodeInterface {
  public init(delegate: SDXQRCode.SDXQRCodeDelegate)
  public func scan(inView view: UIKit.UIView)
  public func stopScan()
  public static func generate(merchantId: Swift.String, merchantUserId: Swift.String, merchantName: Swift.String, ammount: Swift.String?, fee: Swift.String?, city: Swift.String?, country: SDXQRCode.SDXQRCodeCountry, currency: SDXQRCode.SDXQRCodeCurrency, transactionId: Swift.String?, merchantBranchCode: Swift.String?, nationalIdentifier: Swift.String?, products: [Swift.String]?, logo: UIKit.UIImage?, mainColor: UIKit.UIColor?) -> UIKit.UIImage?
  public static func generateNumericCode(merchantId: Swift.String, merchantUserId: Swift.String, merchantName: Swift.String, ammount: Swift.String?, fee: Swift.String?, city: Swift.String?, country: SDXQRCode.SDXQRCodeCountry, currency: SDXQRCode.SDXQRCodeCurrency, transactionId: Swift.String?, merchantBranchCode: Swift.String?, nationalIdentifier: Swift.String?, products: [Swift.String]?, logo: UIKit.UIImage?, mainColor: UIKit.UIColor?, success: @escaping (Swift.String) -> (), fail: @escaping (Swift.Error?) -> ())
  @objc deinit
}
public protocol SDXQRCodeDelegate {
  func didFoundPayload(payload: SDXQRCode.SDXQRCodePayload)
  func didFailToReadCode(error: SDXQRCode.SDXQRCodeError)
}
public enum SDXQRCodeErrorStrings : Swift.String {
  case cameraPermissionError
  case AVCaptureDeviceInputError
  case deviceCameraNotSuported
  case invalidEMVcoFormat
  case informationMissing
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public init?(rawValue: Swift.String)
}
extension SDXQRCode.SDXQRCodeCurrency : Swift.Equatable {}
extension SDXQRCode.SDXQRCodeCurrency : Swift.Hashable {}
extension SDXQRCode.SDXQRCodeCurrency : Swift.RawRepresentable {}
extension SDXQRCode.SDXQRCodeCountry : Swift.Equatable {}
extension SDXQRCode.SDXQRCodeCountry : Swift.Hashable {}
extension SDXQRCode.SDXQRCodeCountry : Swift.RawRepresentable {}
extension SDXQRCode.SDXQRCodeErrorType : Swift.Equatable {}
extension SDXQRCode.SDXQRCodeErrorType : Swift.Hashable {}
extension SDXQRCode.SDXQRCodeErrorStrings : Swift.Equatable {}
extension SDXQRCode.SDXQRCodeErrorStrings : Swift.Hashable {}
extension SDXQRCode.SDXQRCodeErrorStrings : Swift.RawRepresentable {}
